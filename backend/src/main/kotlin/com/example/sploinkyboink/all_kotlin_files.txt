File: SploinkyboinkApplication.kt
package com.example.sploinkyboink

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication

@SpringBootApplication
class SploinkyboinkApplication

fun main(args: Array<String>) {
	runApplication<SploinkyboinkApplication>(*args)
}

--------------------------------------------------------------------------------
File: PollController.kt
package com.example.sploinkyboink.controllers

import com.example.sploinkyboink.services.Poll
import com.example.sploinkyboink.services.PollService
import com.example.sploinkyboink.services.User
import com.example.sploinkyboink.services.Vote
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import java.time.Instant

@RestController
@RequestMapping("/api")
class PollController(
    private val pollService: PollService
) {

    // USER ENDPOINTS -----------------------

    @PostMapping("/users")
    fun createUser(
        @RequestParam username: String,
        @RequestParam email: String
    ): ResponseEntity<String> {
        val user = User(username, email)
        return try {
            pollService.createUser(user)
            ResponseEntity("User created", HttpStatus.CREATED)
        } catch (e: IllegalArgumentException) {
            ResponseEntity(e.message, HttpStatus.BAD_REQUEST)
        }
    }

    @GetMapping("/users")
    fun getAllUsers(): ResponseEntity<List<User>> {
        return ResponseEntity(pollService.getAllUsers().toList(), HttpStatus.OK)
    }

    @GetMapping("/users/{username}")
    fun getUser(@PathVariable username: String): ResponseEntity<User> {
        val user = pollService.getUser(username)
        return if (user != null) {
            ResponseEntity(user, HttpStatus.OK)
        } else {
            ResponseEntity(HttpStatus.NOT_FOUND)
        }
    }

    @DeleteMapping("/users/{username}")
    fun deleteUser(@PathVariable username: String): ResponseEntity<String> {
        return try {
            pollService.deleteUser(pollService.getUser(username)!!)
            ResponseEntity("User deleted", HttpStatus.OK)
        } catch (e: IllegalArgumentException) {
            ResponseEntity(e.message, HttpStatus.NOT_FOUND)
        }
    }

    // POLL ENDPOINTS -----------------------

    @PostMapping("/polls")
    fun createPoll(
        @RequestParam username: String,
        @RequestParam question: String,
        @RequestParam voteOptions: List<String>
    ): ResponseEntity<String> {
        val user = pollService.getUser(username)
        return if (user != null) {
            val pollId = "poll_${System.currentTimeMillis()}"
            val poll = Poll(
                pollId = pollId,
                byUser = user,
                question = question,
                publishedAt = Instant.now(),
                validUntil = Instant.now().plusSeconds(3600),
                voteOptions = voteOptions
            )
            pollService.createPoll(user, poll)
            ResponseEntity("Poll created with ID: $pollId", HttpStatus.CREATED)
        } else {
            ResponseEntity("User not found", HttpStatus.NOT_FOUND)
        }
    }


    @GetMapping("/polls")
    fun getAllPolls(): ResponseEntity<List<Poll>> {
        return ResponseEntity(pollService.getAllPolls().toList(), HttpStatus.OK)
    }

    @PostMapping("/polls/{pollId}/vote")
    fun voteOnPoll(
        @PathVariable pollId: String,
        @RequestParam username: String,
        @RequestParam voteOption: String
    ): ResponseEntity<String> {
        val user = pollService.getUser(username)
        return if (user != null) {
            val vote = Vote(voteOption, Instant.now())
            pollService.userVoteOnPoll(user, pollId, vote)
            ResponseEntity("Vote registered", HttpStatus.OK)
        } else {
            ResponseEntity("User not found", HttpStatus.NOT_FOUND)
        }
    }

    @PutMapping("/polls/{pollId}/vote")
    fun editVoteOnPoll(
        @PathVariable pollId: String,
        @RequestParam username: String,
        @RequestParam voteOption: String
    ): ResponseEntity<String> {
        val user = pollService.getUser(username)
        return if (user != null) {
            try {
                val updatedVote = Vote(voteOption, Instant.now())
                pollService.userEditVoteOnPoll(user, pollId, updatedVote)
                ResponseEntity("Vote updated", HttpStatus.OK)
            } catch (e: IllegalArgumentException) {
                ResponseEntity(e.message, HttpStatus.BAD_REQUEST)
            }
        } else {
            ResponseEntity("User not found", HttpStatus.NOT_FOUND)
        }
    }

    @GetMapping("/polls/{pollId}/votes")
    fun getAllVotesInPoll(@PathVariable pollId: String): ResponseEntity<MutableMap<String, Vote>> {
        val votes = pollService.getAllVotesFromPoll(pollId)
        return if (votes != null) {
            ResponseEntity(votes, HttpStatus.OK)
        } else {
            ResponseEntity(HttpStatus.NOT_FOUND)
        }
    }

    @DeleteMapping("/polls/{pollId}")
    fun deletePoll(@PathVariable pollId: String): ResponseEntity<String> {
        return try {
            pollService.deletePoll(pollId)
            ResponseEntity("Poll deleted", HttpStatus.OK)
        } catch (e: IllegalArgumentException) {
            ResponseEntity(e.message, HttpStatus.NOT_FOUND)
        }
    }
}

--------------------------------------------------------------------------------
File: Poll.kt
package com.example.sploinkyboink.services

import java.time.Instant

data class Poll(
    val pollId: String,
    val byUser: User,
    val question: String,
    val publishedAt: Instant,
    val validUntil: Instant,
    val voteOptions: List<String>,
    val votes: MutableMap<String, Vote> = mutableMapOf()
) {
    // User votes on the poll
    fun vote(user: User, vote: Vote) {
        if (vote.voteOption in voteOptions) {
            votes[user.username] = vote
        } else {
            throw IllegalArgumentException("Invalid vote option")
        }
    }

    // User edits their existing vote
    fun editVote(user: User, vote: Vote) {
        if (votes.containsKey(user.username)) {
            vote(user, vote)
        } else {
            throw IllegalArgumentException("No existing vote to edit")
        }
    }

    // User deletes their vote
    fun deleteVote(user: User) {
        votes.remove(user.username)
    }

    // Get all votes for the poll
    fun getAllVotes(): MutableMap<String, Vote> {
        return votes
    }
}
--------------------------------------------------------------------------------
File: PollService.kt
package com.example.sploinkyboink.services

import org.springframework.stereotype.Service

@Service
class PollService {
    private val users = mutableMapOf<String, User>()
    private val polls = mutableMapOf<String, Poll>()

    // Creates a new user
    fun createUser(user: User) {
        if (!users.containsKey(user.username)) {
            users[user.username] = user
        } else {
            throw IllegalArgumentException("User already exists")
        }
    }

    // Edits an existing user
    fun editUser(user: User) {
        if (users.containsKey(user.username)) {
            users[user.username] = user
        } else {
            throw IllegalArgumentException("User not found")
        }
    }

    // Deletes a user
    fun deleteUser(user: User) {
        users.remove(user.username)
    }

    // Retrieves a user by username
    fun getUser(username: String): User? {
        return users[username]
    }

    // Lists all users
    fun getAllUsers(): MutableCollection<User> {
        return users.values
    }

    // Creates a new poll
    fun createPoll(user: User, poll: Poll) {
        if (polls.containsKey(poll.pollId)) {
            throw IllegalArgumentException("Poll with this ID already exists")
        } else {
            polls[poll.pollId] = poll
        }
    }

    // Edits an existing poll
    fun editPoll(poll: Poll) {
        if (polls.containsKey(poll.pollId)) {
            polls[poll.pollId] = poll
        } else {
            throw IllegalArgumentException("Poll not found")
        }
    }

    // Retrieves a poll by pollId
    fun getPoll(pollId: String): Poll? {
        return polls[pollId]
    }

    // Lists all polls
    fun getAllPolls(): MutableCollection<Poll> {
        return polls.values
    }

    // Deletes a poll
    fun deletePoll(pollId: String) {
        polls.remove(pollId)
    }

    // User votes on a poll
    fun userVoteOnPoll(user: User, pollId: String, vote: Vote) {
        val poll = getPoll(pollId)
        if (poll != null) {
            poll.vote(user, vote)
        } else {
            throw IllegalArgumentException("Poll not found")
        }
    }

    // User edits their vote on a poll
    fun userEditVoteOnPoll(user: User, pollId: String, vote: Vote) {
        val poll = getPoll(pollId)
        if (poll != null) {
            poll.editVote(user, vote)
        } else {
            throw IllegalArgumentException("Poll not found")
        }
    }

    // User deletes their vote on a poll
    fun userDeleteVoteOnPoll(user: User, pollId: String) {
        val poll = getPoll(pollId)
        if (poll != null) {
            poll.deleteVote(user)
        } else {
            throw IllegalArgumentException("Poll not found")
        }
    }

    // Lists all votes in a poll
    fun getAllVotesFromPoll(pollId: String): MutableMap<String, Vote>? {
        val poll = getPoll(pollId)
        return poll?.getAllVotes()
    }
}
--------------------------------------------------------------------------------
File: User.kt
package com.example.sploinkyboink.services

data class User (
    val username : String,
    val email : String
) {
}
--------------------------------------------------------------------------------
File: Vote.kt
package com.example.sploinkyboink.services

import java.time.Instant

data class Vote (
    val voteOption: String,
    val publishedAt: Instant,
    ) {
}
--------------------------------------------------------------------------------
